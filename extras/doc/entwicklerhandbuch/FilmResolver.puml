@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "function Resolver(): ClassDecorator" as Resolver
  hide Resolver circle

  class "function UseGuards(): ClassDecorator | MethodDecorator" as UseGuards
  hide UseGuards circle

  class "function UseInterceptors(): ClassDecorator | MethodDecorator" as UseInterceptors
  hide UseInterceptors circle

  class "function Query(): MethodDecorator" as Query
  hide Query circle

  class "function Mutation(): MethodDecorator" as Mutation
  hide Mutation circle

  class "function Args(): ParameterDecorator" as Args
  hide Args circle

  Resolver -[hidden]down-> UseGuards
  UseGuards -[hidden]down-> UseInterceptors
  UseInterceptors -[hidden]down-> Query
  Query -[hidden]down-> Mutation
  Mutation -[hidden]down-> Args
}

package security.auth {
  enum Role {
    ADMIN
    MITARBEITER
    ABTEILUNGSLEITER
    KUNDE
  }

  class "const Roles = (...roles: Role[]) => SetMetadata()" as Roles
  hide Roles circle

  Roles ..> Role
}

package film #DDDDDD {
  package entity #FFFFFF {
    class Film <<entity>>
  }

  package service #FFFFFF {
    class FilmService << control >>
  }

  class "type FilmDTO = Film & { id?: string; version?: number; }" as FilmDTO
  hide FilmDTO circle

  FilmResolver o-down-> "1" FilmService : service
  FilmResolver ..> Film

  FilmResolver .up.> Resolver
  FilmResolver .up.> UseGuards
  FilmResolver .up.> UseInterceptors
  FilmResolver .up.> Query
  FilmResolver .up.> Mutation
  FilmResolver .up.> Args

  FilmResolver .up.> Roles
  FilmResolver .up.> Role

  FilmResolver ..> FilmDTO

  FilmResolver .up.> Promise

  class FilmResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Query async findById(@Args() id: string): Promise<FilmDTO>
    + @Query async find(@Args() titel: string |undefined): Promise<FilmDTO[]>
    + @Mutation @Roles() async create(@Args() film: Film): Promise<string>
    + @Mutation @Roles() async update(@Args() film: FilmDTO): Promise<number>
    + @Mutation @Roles() async delete(@Args() id: string): Promise<boolean>
  }
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
